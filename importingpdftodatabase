import PyPDF2
import re
import mysql.connector
import os
from datetime import datetime

# Function to extract data from PDF
def extract_data_from_pdf(pdf_path):
    try:
        with open(pdf_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            total_principal = None
            distribution_date = None
            total_scheduled_principal = None
            curtailments = None
            prepayments = None
            netliquidation = None
            repurchased = None
            substitutional = None
            others = None

            filename = os.path.basename(pdf_path)  # Get the filename

            for page in reader.pages:
                text = page.extract_text()
                if 'Principal Funds Available' in text:
                    # Extract all relevant data from the fields
                    total_principal_match = re.search(r'Total Principal Funds Available:\s*(-?\d{1,3}(?:,\d{3})*(?:\.\d{1,2})?)', text)
                    if total_principal_match:
                        total_principal = float(total_principal_match.group(1).replace(',', ''))
                    scheduled_principal_match = re.search(r'Scheduled Principal\s*(-?\d{1,3}(?:,\d{3})*(?:\.\d{1,2})?)', text)
                    if scheduled_principal_match:
                        total_scheduled_principal = float(scheduled_principal_match.group(1).replace(',', ''))
                    curtailments_match = re.search(r'Curtailments\s*(?:\(([-\d,.]+)\)|(-?\d{1,3}(?:,\d{3})*(?:\.\d{1,2})?))', text)
                    if curtailments_match:
                        if curtailments_match.group(1):  # If the value is enclosed in parentheses
                            curtailments = float(curtailments_match.group(1).replace(',', '')) * -1  # Convert to negative
                        else:
                            curtailments = float(curtailments_match.group(2).replace(',', ''))
                    prepayments_match = re.search(r'Prepayments in Full\s*(-?\d{1,3}(?:,\d{3})*(?:\.\d{1,2})?)', text)
                    if prepayments_match:
                        prepayments = float(prepayments_match.group(1).replace(',', ''))
                    
                    netliquidation_match = re.search(r'Net Liquidation Proceeds\s*(?:\(([-\d,.]+)\)|(-?\d{1,3}(?:,\d{3})*(?:\.\d{1,2})?))', text)
                    if netliquidation_match:
                        if netliquidation_match.group(1):  # If the value is enclosed in parentheses
                            netliquidation = float(netliquidation_match.group(1).replace(',', '')) * -1  # Convert to negative
                        else:
                            netliquidation = float(netliquidation_match.group(2).replace(',', ''))
                    else:
                        liquidation_proceeds_match = re.search(r'Liquidation Proceeds\s*(?:\(([-\d,.]+)\)|(-?\d{1,3}(?:,\d{3})*(?:\.\d{1,2})?))', text)
                        if liquidation_proceeds_match:
                            if liquidation_proceeds_match.group(1):  # If the value is enclosed in parentheses
                                netliquidation = float(liquidation_proceeds_match.group(1).replace(',', '')) * -1  # Convert to negative
                            else:
                                netliquidation = float(liquidation_proceeds_match.group(2).replace(',', ''))



                    repurchased_match = re.search(r'Repurchased Principal\s*(-?\d{1,3}(?:,\d{3})*(?:\.\d{1,2})?)', text)
                    if repurchased_match:
                        repurchased = float(repurchased_match.group(1).replace(',', ''))
                    substitutional_match = re.search(r'Substitution Principal\s*(-?\d{1,3}(?:,\d{3})*(?:\.\d{1,2})?)', text)
                    if substitutional_match:
                        substitutional = float(substitutional_match.group(1).replace(',', ''))
                    others_match = re.search(r'Other Principal\s*(-?\d{1,3}(?:,\d{3})*(?:\.\d{1,2})?)', text)
                    if others_match:
                        others = float(others_match.group(1).replace(',', ''))

                    break  # Break loop after finding Reconciliation Detail
            
            first_page_text = reader.pages[0].extract_text()
            distribution_date_match = re.search(r'Distribution Date:\s*(\d{1,2}/\d{1,2}/\d{1,4})', first_page_text)
            if distribution_date_match:
                distribution_date_str = distribution_date_match.group(1)
                distribution_date = datetime.strptime(distribution_date_str, '%m/%d/%Y').strftime('%Y-%m-%d')
            

            if total_principal is None:
                print(f"No total principal found in PDF: {pdf_path}")
            if total_scheduled_principal is None:
                print(f"No scheduled principal found in PDF: {pdf_path}")
            if curtailments is None:
                print(f"No curtailments found in PDF: {pdf_path}")
            if prepayments is None:
                print(f"No prepayments found in PDF: {pdf_path}")
            if netliquidation is None:
                print(f"No net liquidation proceeds found in PDF: {pdf_path}")
            if repurchased is None:
                print(f"No repurchased principal found in PDF: {pdf_path}")
            if substitutional is None:
                print(f"No substitution principal found in PDF: {pdf_path}")
            if others is None:
                print(f"No other charges found in PDF: {pdf_path}")

            return filename, distribution_date, total_scheduled_principal, curtailments, prepayments, netliquidation, repurchased, substitutional, others, total_principal
    except Exception as e:
        print(f"Error processing PDF {pdf_path}: {e}")
        return None, None, None, None, None, None, None, None, None, None

# Function to insert data into MySQL database
def insert_data_into_database(data, db_config):
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    insert_query = "INSERT INTO tpfa2024 (FileName, DistributionDate, ScheduledPrincipal, Curtailments, Prepayments, NetLiquidation, Repurchased, Substitutional, Others, TotalPrincipalFundsAvailable) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"
    cursor.execute(insert_query, data)
    conn.commit()
    cursor.close()
    conn.close()

# Function to drop and recreate the table
def recreate_table(db_config):
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    drop_query = "DROP TABLE IF EXISTS tpfa2024"
    cursor.execute(drop_query)
    create_query = "CREATE TABLE tpfa2024 (FileName VARCHAR(255), DistributionDate DATE, ScheduledPrincipal DECIMAL(12,2), Curtailments DECIMAL(12,2), Prepayments DECIMAL(12,2), NetLiquidation DECIMAL(12,2), Repurchased DECIMAL(12,2), Substitutional DECIMAL(12,2), Others DECIMAL(12,2), TotalPrincipalFundsAvailable DECIMAL(12,2))"
    cursor.execute(create_query)
    conn.commit()
    cursor.close()
    conn.close()

# Function to process PDF files in a directory
def process_pdf_directory(pdf_directory, db_config):
    processed_files = []
    missing_files = []
    # Recreate the table
    recreate_table(db_config)
    # Iterate over PDF files in the directory
    for root, dirs, files in os.walk(pdf_directory):
        for filename in files:
            if filename.lower().endswith('.pdf'): 
                pdf_path = os.path.join(root, filename)
                # Extract data from PDF
                data = extract_data_from_pdf(pdf_path)
                if data:
                    # Insert data into MySQL database
                    insert_data_into_database(data, db_config)
                    processed_files.append(filename)
                else:
                    missing_files.append(filename)
    return processed_files, missing_files

# MySQL database configuration
db_config = {
    'host': 'localhost',
    'database': 'holderstatement',
    'user': 'root',
    'password': 'Devas@01'
}

# Directory containing the PDF files
pdf_directory = r'c:/Users/USER/Desktop/CitiGroup/Certificate Holders Statement/'

# Process PDF files in the directory
processed_files, missing_files = process_pdf_directory(pdf_directory, db_config)
print("Extracted Successfully")
